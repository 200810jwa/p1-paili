CREATE OR REPLACE PROCEDURE p1_db_setup()
AS 
$$
BEGIN
DROP TABLE IF EXISTS ERS_REIMBURSEMENT, ERS_REIMBURSEMENT_STATUS, ERS_REIMBURSEMENT_TYPE CASCADE;
DROP TABLE IF EXISTS ERS_USERS, ERS_ROLES CASCADE;

CREATE TABLE ERS_REIMBURSEMENT_STATUS(
	STATUS_ID INTEGER PRIMARY KEY,
	STATUS VARCHAR(20) UNIQUE NOT NULL
);

CREATE TABLE ERS_REIMBURSEMENT_TYPE(
	TYPE_ID INTEGER PRIMARY KEY,
	REIMB_TYPE VARCHAR(20) UNIQUE NOT NULL
);

CREATE TABLE ERS_ROLES(
	USER_ROLE_ID INTEGER PRIMARY KEY,
	USER_ROLE VARCHAR(20) UNIQUE NOT NULL
);

CREATE TABLE ERS_USERS(
	USER_ID INTEGER PRIMARY KEY,
	USERNAME VARCHAR(50) UNIQUE NOT NULL,
	PASSHASH VARCHAR(250) NOT NULL,
	FIRST_NAME VARCHAR(100) NOT NULL,
	LAST_NAME VARCHAR(100) NOT NULL,
	EMAIL VARCHAR(150) NOT NULL,
	ROLE_ID INTEGER NOT NULL,
	FOREIGN KEY (ROLE_ID) REFERENCES ERS_ROLES(USER_ROLE_ID)
);

CREATE TABLE ERS_REIMBURSEMENT(
	REIMB_ID INTEGER PRIMARY KEY,
	AMOUNT DECIMAL(50,2) NOT NULL CHECK (AMOUNT > 0),
	SUBMITTED DATE NOT NULL,
	RESOLVED DATE CHECK (RESOLVED > SUBMITTED),
	DESCRIPTION VARCHAR(250),
	RECEIPT BYTEA NOT NULL,
	AUTHOR INTEGER NOT NULL,
	RESOLVER INTEGER,
	TYPE_ID INTEGER NOT NULL,
	STATUS_ID INTEGER NOT NULL,
	FOREIGN KEY (STATUS_ID) REFERENCES ERS_REIMBURSEMENT_STATUS(STATUS_ID),
	FOREIGN KEY (TYPE_ID) REFERENCES  ERS_REIMBURSEMENT_TYPE(TYPE_ID),
	FOREIGN KEY (AUTHOR) REFERENCES ERS_USERS(USER_ID),
	FOREIGN KEY (RESOLVER) REFERENCES ERS_USERS(USER_ID)
);


-- VIEWS to avoid join tables
CREATE VIEW ERS_REIMBURSEMENT_FULL AS
SELECT * FROM ((ERS_REIMBURSEMENT INNER JOIN ERS_REIMBURSEMENT_STATUS USING(STATUS_ID)) 
INNER JOIN ERS_REIMBURSEMENT_TYPE USING(TYPE_ID));

CREATE VIEW ERS_USERS_FULL AS
SELECT * FROM (ERS_USERS INNER JOIN ERS_ROLES
ON ROLE_ID=USER_ROLE_ID);


-- STATUS AND ROLES SETUP
INSERT INTO ERS_ROLES(USER_ROLE_ID, USER_ROLE) VALUES (0, 'FINANCE MANAGER'),(-1, 'EMPLOYEE');
INSERT INTO ers_reimbursement_status(STATUS_ID, STATUS) VALUES (0, 'PENDING'), (1, 'APPROVED'), (-1, 'DENIED');
INSERT INTO ers_reimbursement_type(TYPE_ID, REIMB_TYPE) VALUES (0, 'OTHER'), (1, 'LODGING'), (2, 'TRAVEL'), (3, 'FOOD');
END
$$ LANGUAGE plpgsql;

CALL p1_db_setup();

-- testing below this point
SELECT * FROM (public.ERS_REIMBURSEMENT 
INNER JOIN public.ERS_REIMBURSEMENT_TYPE 
USING(TYPE_ID)) WHERE REIMB_ID=1;

SELECT * FROM (public.ERS_USERS 
INNER JOIN public.ERS_ROLES
ON ROLE_ID=USER_ROLE_ID) WHERE USER_ID=1;

SELECT * FROM ERS_REIMBURSEMENT_FULL WHERE REIMB_ID=1;
SELECT * FROM ERS_USERS_FULL WHERE USER_ID=1;
UPDATE ERS_USERS SET FIRST_NAME='Joe' WHERE USER_ID=1;

SELECT * FROM public.ERS_REIMBURSEMENT_FULL WHERE DESCRIPTION LIKE '%DESCRIPTION%';